managed; // implementation in class zbp_ats_ha_travel unique; is commentes for EARLY NUMBERING
strict ( 2 );

//Define the behavior for root entity
define behavior for ZATS_HA_TRAVEL alias Travel
//MAKE the behavior pool/implementation for Travel
 implementation in class zbp_ats_ha_travel unique
//Telling the framework to perform CRUD on /dmo/travel_m Table
persistent table /dmo/travel_m
//How the rAP should handle the locks - if a travel reqiest is locked
//the other user cannot edit the childs - like its booking and suppl
lock master
//Controls the permissions and security settings for our RAP BO
authorization master ( instance )
//This is for concurrency control
etag master LastChangedAt
early numbering // For Early Numbering
{ // CRUD operations that RAP will do authomatically
  create;
  update;
  delete;

// STATIC FEATURE CONTROL
  field ( readonly ) TravelId, createdBy, CreatedAt, LastChangedBy, LastChangedAt ;//  creating a Travel Request all the fields listed will be uneditable
  field (mandatory) AgencyId, CustomerId, BeginDate, EndDate, OverallStatus, BookingFee, CurrencyCode;

  // A booking can only be created with Travel request
//  association _Booking { create; }
  association _Booking { create (features:instance);} //logic to control booking creation based on Trael Status if rejected dont show th e create button

// ADDING DATA ACTION (FACTORY ACTION)
 factory action copyTravel[1]; // [1] means i am coping only one record
  mapping for  /dmo/Travel_m
  {
  TravelId = travel_id;
  AgencyId = agency_id;
  CustomerId = customer_id;
  BeginDate = begin_date;
  EndDate = end_date;
  TotalPrice = total_price;
  BookingFee = booking_fee;
  CurrencyCode = currency_code;
  Description = description;
  OverallStatus = overall_status;
  CreatedBy = created_by;
  CreatedAt = created_at;
  LastChangedBy = last_changed_by;
  LastChangedAt = last_changed_at;
  }

}
//Define the behavior for child entity
define behavior for ZATS_HA_BOOKING alias Booking
//MAKE the behavior pool/implementation for Booking
 implementation in class zbp_ats_ha_Booking unique
persistent table /dmo/booking_m
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
early numbering //For early numbering
{
  update;
  delete;
//  field ( readonly ) TravelId, BookingId; "It means while creating booking TravelID and BookingId should be read only uneditable
    field ( readonly ) TravelId, BookingId;
    field ( mandatory ) CarrierId, ConnectionId, FlightDate, BookingStatus;
  association _Travel;
  association _Supplements { create; }
  mapping for /dmo/Booking_m
   {
   TravelId = travel_id;
   BookingId = booking_id;
   CustomerId = customer_id;
   CarrierId = carrier_id;
   ConnectionId  = connection_id;
   FlightDate = flight_date;
   FlightPrice = flight_price;
   CurrencyCode = currency_code ;
   BookingStatus = booking_status;
   LastChangedAt = last_changed_at;
  }

}
//Define the behavior for child entity
define behavior for ZATS_HA_BOOKSUPPL alias BookSuppl
//MAKE the behavior pool/implementation for Booking Suplemennts
 implementation in class zbp_ats_ha_BookSuppl unique
//Telling the framework to perform CRUD on /dmo/travel_m Table
persistent table /dmo/booksuppl_m
lock dependent by _Travel
authorization dependent by _Travel
etag master  LastChangedAt
early numbering //For early numbering
{

  update;
  delete;

  field ( readonly ) TravelId, BookingId, BookingSupplementId;
  field ( mandatory ) Price, SupplementId;
//  It means while creating booking Suplements TravelID, BookingId and BookingSupplementId should be read only uneditable
//  field ( readonly ) TravelId, BookingId, BookingSupplementId;
  association _Travel;
  association _Booking;
  mapping for /dmo/booksuppl_m
  {
    TravelId = travel_id;
    BookingId = booking_id;
    BookingSupplementId = booking_supplement_id;
    SupplementId = supplement_id;
    Price = Price;
    CurrencyCode = currency_code;
    LastChangedAt = last_changed_at;
  }
}